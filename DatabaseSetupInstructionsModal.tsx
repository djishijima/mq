
import React, { useState } from 'react';

interface DatabaseSetupInstructionsModalProps {
  onRetry: () => void;
}

const DatabaseIcon: React.FC<{className?: string}> = ({className}) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
        <ellipse cx="12" cy="5" rx="9" ry="3"></ellipse>
        <path d="M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"></path>
        <path d="M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"></path>
    </svg>
);

const CheckIcon: React.FC<{className?: string}> = ({className}) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
      <polyline points="20 6 9 17 4 12" />
    </svg>
);

const ClipboardIcon: React.FC<{className?: string}> = ({className}) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
      <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" />
      <rect x="8" y="2" width="8" height="4" rx="1" ry="1" />
    </svg>
);

const RefreshCw: React.FC<{className?: string}> = ({className}) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
        <path d="M3 2v6h6"/><path d="M21 12A9 9 0 0 0 6 5.3L3 8"/><path d="M21 22v-6h-6"/><path d="M3 12a9 9 0 0 0 15 6.7l3-2.7"/>
    </svg>
);


const DatabaseSetupInstructionsModal: React.FC<DatabaseSetupInstructionsModalProps> = ({ onRetry }) => {
  const sqlScript = `-- Supabase SQL Editorで以下のスクリプト全体を実行してください。
-- このスクリプトは何度実行しても安全なように設計されています。

-- 1. 既存テーブルの作成 (存在しない場合のみ)
-- 案件情報を保存する "jobs" テーブル
CREATE TABLE IF NOT EXISTS public.jobs (
  id TEXT PRIMARY KEY,
  client_name TEXT NOT NULL,
  title TEXT NOT NULL,
  status TEXT NOT NULL,
  due_date DATE NOT NULL,
  quantity INTEGER NOT NULL,
  paper_type TEXT NOT NULL,
  finishing TEXT NOT NULL,
  details TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  price INTEGER NOT NULL,
  variable_cost INTEGER NOT NULL,
  invoice_status TEXT NOT NULL,
  invoiced_at TIMESTAMPTZ,
  paid_at TIMESTAMPTZ
);
-- *** NEW *** 請求書機能のためにカラムを追加
ALTER TABLE public.jobs ADD COLUMN IF NOT EXISTS ready_to_invoice BOOLEAN DEFAULT false;
ALTER TABLE public.jobs ADD COLUMN IF NOT EXISTS invoice_id UUID;


-- 会計の仕訳情報を保存する "journal_entries" テーブル
CREATE TABLE IF NOT EXISTS public.journal_entries (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  date TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  account TEXT NOT NULL,
  debit INTEGER NOT NULL DEFAULT 0,
  credit INTEGER NOT NULL DEFAULT 0,
  description TEXT
);

-- *** NEW *** 勘定科目マスターテーブル
CREATE TABLE IF NOT EXISTS public.account_items (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  code TEXT NOT NULL UNIQUE,
  name TEXT NOT NULL,
  category_code TEXT,
  is_active BOOLEAN NOT NULL DEFAULT true,
  sort_order INTEGER NOT NULL DEFAULT 0,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);


-- 顧客情報を保存する "customers" テーブル (詳細スキーマ)
CREATE TABLE IF NOT EXISTS public.customers (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    customer_code VARCHAR,
    customer_code_alt VARCHAR,
    customer_name VARCHAR NOT NULL,
    customer_name_kana VARCHAR,
    name2 VARCHAR,
    customer_rank VARCHAR,
    customer_division VARCHAR,
    sales_type VARCHAR,
    support_company_flag TEXT,
    zip_code VARCHAR,
    address_1 VARCHAR,
    address_2 VARCHAR,
    address_3 VARCHAR,
    nearest_station VARCHAR,
    phone_number VARCHAR,
    fax VARCHAR,
    representative VARCHAR,
    foundation_date DATE,
    capital VARCHAR,
    annual_sales VARCHAR,
    employees_count VARCHAR,
    credit_limit VARCHAR,
    closing_day TEXT,
    pay_day TEXT,
    recovery_method TEXT,
    pay_money TEXT,
    trade_terms TEXT,
    bank_name VARCHAR,
    branch_name VARCHAR,
    branch_code VARCHAR,
    account_no VARCHAR,
    account_name_kana VARCHAR,
    sales_user_code TEXT,
    note TEXT,
    info_history TEXT,
    info_sales_activity TEXT,
    info_order_flow TEXT,
    info_transaction_progress TEXT,
    info_current_orders TEXT,
    info_future_proposals TEXT,
    info_competitors TEXT,
    info_requirements TEXT,
    info_sales_ideas TEXT,
    info_management_notes TEXT,
    info_other TEXT,
    create_user_id UUID,
    create_date TIMESTAMPTZ,
    update_user_id UUID,
    update_date TIMESTAMPTZ,
    drawing_memo TEXT,
    drawing_date TEXT,
    bill_payment_day TEXT,
    bill_pay NUMERIC,
    credit_sales_pay NUMERIC,
    tax_fraction INTEGER,
    tax_in_flag TEXT,
    budget_flag TEXT,
    start_date DATE,
    end_date DATE,
    introducer TEXT,
    keii TEXT,
    previous_person TEXT,
    sales_trends TEXT,
    gross_profit TEXT,
    gross_profit_by_product TEXT,
    company_content TEXT,
    key_person TEXT,
    order_rate TEXT,
    ippan_pub TEXT,
    text_pub TEXT,
    gyokai_pub TEXT,
    shoin_pub TEXT,
    tsushin_edu TEXT,
    other_pub TEXT,
    business_result TEXT,
    company_features TEXT,
    customer_trend TEXT,
    what_happened TEXT,
    response_to_competitors TEXT,
    sales_goal TEXT,
    external_items TEXT,
    internal_items TEXT,
    quotation_point TEXT,
    main_products TEXT,
    total_order_amount TEXT,
    rival_info TEXT,
    customer_contact_info TEXT,
    org_chart TEXT,
    pq TEXT,
    vq TEXT,
    mq TEXT,
    m_rate TEXT,
    accident_history TEXT,
    customer_voice TEXT,
    annual_action_plan TEXT,
    lost_orders TEXT,
    growth_potential TEXT,
    monthly_plan TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- *** UPDATED *** リード管理テーブルの更新
-- テーブルが存在しない場合は基本構造で作成
CREATE TABLE IF NOT EXISTS public.leads (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    status TEXT,
    created_at TIMESTAMPTZ WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- 旧スキーマからのカラム名変更 (存在する場合のみ)
DO $$
BEGIN
  IF EXISTS(SELECT 1 FROM information_schema.columns WHERE table_name='leads' AND column_name='charge_person') THEN
    ALTER TABLE public.leads RENAME COLUMN charge_person TO name;
  END IF;
  IF EXISTS(SELECT 1 FROM information_schema.columns WHERE table_name='leads' AND column_name='company_name') THEN
    ALTER TABLE public.leads RENAME COLUMN company_name TO company;
  END IF;
END $$;

-- スキーマ仕様に合わせてカラムを追加 (存在しない場合のみ)
ALTER TABLE public.leads
  ADD COLUMN IF NOT EXISTS name TEXT,
  ADD COLUMN IF NOT EXISTS email TEXT,
  ADD COLUMN IF NOT EXISTS phone TEXT,
  ADD COLUMN IF NOT EXISTS company TEXT,
  ADD COLUMN IF NOT EXISTS source TEXT,
  ADD COLUMN IF NOT EXISTS tags TEXT[],
  ADD COLUMN IF NOT EXISTS message TEXT,
  ADD COLUMN IF NOT EXISTS updated_at TIMESTAMPTZ WITH TIME ZONE,
  ADD COLUMN IF NOT EXISTS referrer TEXT,
  ADD COLUMN IF NOT EXISTS referrer_url TEXT,
  ADD COLUMN IF NOT EXISTS landing_page_url TEXT,
  ADD COLUMN IF NOT EXISTS search_keywords TEXT,
  ADD COLUMN IF NOT EXISTS utm_source TEXT,
  ADD COLUMN IF NOT EXISTS utm_medium TEXT,
  ADD COLUMN IF NOT EXISTS utm_campaign TEXT,
  ADD COLUMN IF NOT EXISTS utm_term TEXT,
  ADD COLUMN IF NOT EXISTS utm_content TEXT,
  ADD COLUMN IF NOT EXISTS user_agent TEXT,
  ADD COLUMN IF NOT EXISTS ip_address TEXT,
  ADD COLUMN IF NOT EXISTS device_type TEXT,
  ADD COLUMN IF NOT EXISTS browser_name TEXT,
  ADD COLUMN IF NOT EXISTS os_name TEXT,
  ADD COLUMN IF NOT EXISTS country TEXT,
  ADD COLUMN IF NOT EXISTS city TEXT,
  ADD COLUMN IF NOT EXISTS region TEXT,
  ADD COLUMN IF NOT EXISTS employees TEXT,
  ADD COLUMN IF NOT EXISTS budget TEXT,
  ADD COLUMN IF NOT EXISTS timeline TEXT,
  ADD COLUMN IF NOT EXISTS inquiry_type TEXT,
  ADD COLUMN IF NOT EXISTS inquiry_types TEXT[],
  ADD COLUMN IF NOT EXISTS info_sales_activity TEXT;

-- 不要になった旧カラムを削除
ALTER TABLE public.leads
  DROP COLUMN IF EXISTS last_contact_date,
  DROP COLUMN IF EXISTS next_action_date;

-- NOT NULL 制約を仕様に合わせて設定
ALTER TABLE public.leads ALTER COLUMN name SET NOT NULL;
ALTER TABLE public.leads ALTER COLUMN company SET NOT NULL;
ALTER TABLE public.leads ALTER COLUMN status SET NOT NULL;


-- *** NEW *** 販売パイプラインテーブル (プレースホルダー)
CREATE TABLE IF NOT EXISTS public.sales_pipeline (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    deal_name TEXT NOT NULL,
    customer_id UUID REFERENCES public.customers(id),
    stage TEXT NOT NULL, -- e.g. 'Qualification', 'Proposal', 'Negotiation', 'Closed Won', 'Closed Lost'
    expected_close_date DATE,
    amount NUMERIC,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- *** NEW *** 請求書発行機能のテーブルと関数
-- 請求書番号のためのシーケンス
CREATE SEQUENCE IF NOT EXISTS invoice_no_seq START 1001;

-- 請求書テーブル
CREATE TABLE IF NOT EXISTS public.invoices (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    invoice_no TEXT UNIQUE NOT NULL,
    invoice_date DATE NOT NULL DEFAULT CURRENT_DATE,
    due_date DATE,
    customer_name TEXT NOT NULL,
    subtotal_amount NUMERIC NOT NULL,
    tax_amount NUMERIC NOT NULL,
    total_amount NUMERIC NOT NULL,
    status TEXT NOT NULL DEFAULT 'issued', -- 'draft', 'issued', 'paid', 'void'など
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- 請求明細テーブル
CREATE TABLE IF NOT EXISTS public.invoice_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    invoice_id UUID NOT NULL REFERENCES public.invoices(id) ON DELETE CASCADE,
    job_id TEXT REFERENCES public.jobs(id),
    description TEXT NOT NULL,
    quantity NUMERIC NOT NULL,
    unit TEXT,
    unit_price NUMERIC NOT NULL,
    line_total NUMERIC NOT NULL,
    sort_index INTEGER DEFAULT 0
);

-- 案件から請求書を作成する関数
CREATE OR REPLACE FUNCTION public.create_invoice_from_jobs(job_ids TEXT[])
RETURNS TABLE(invoice_id UUID, invoice_no TEXT) AS $$
DECLARE
    v_customer_name TEXT;
    v_subtotal_amount NUMERIC := 0;
    v_tax_rate NUMERIC := 0.10; -- 10% tax rate
    v_tax_amount NUMERIC;
    v_total_amount NUMERIC;
    v_new_invoice_id UUID;
    v_invoice_no TEXT;
    job_record RECORD;
BEGIN
    -- 1. 全ての案件が同じ顧客のもので、請求準備ができていて、未請求であることを確認
    SELECT client_name INTO v_customer_name FROM public.jobs WHERE id = job_ids[1];

    IF NOT FOUND THEN
        RAISE EXCEPTION 'Job with ID % not found', job_ids[1];
    END IF;

    IF EXISTS (
        SELECT 1 FROM public.jobs 
        WHERE id = ANY(job_ids) 
        AND (client_name != v_customer_name OR invoice_status != '未請求' OR ready_to_invoice != TRUE)
    ) THEN
        RAISE EXCEPTION '全ての案件は同じ顧客のもので、請求準備完了かつ未請求である必要があります。';
    END IF;
    
    -- 2. 合計金額を計算
    SELECT SUM(price) INTO v_subtotal_amount FROM public.jobs WHERE id = ANY(job_ids);
    
    v_tax_amount := v_subtotal_amount * v_tax_rate;
    v_total_amount := v_subtotal_amount + v_tax_amount;
    
    -- 3. 新しい請求書を作成
    v_invoice_no := 'INV-' || TO_CHAR(NOW(), 'YYYYMM') || '-' || LPAD(NEXTVAL('invoice_no_seq')::text, 4, '0');

    INSERT INTO public.invoices (invoice_no, customer_name, subtotal_amount, tax_amount, total_amount, status, due_date)
    VALUES (v_invoice_no, v_customer_name, v_subtotal_amount, v_tax_amount, v_total_amount, 'issued', CURRENT_DATE + interval '30 days')
    RETURNING id INTO v_new_invoice_id;
    
    -- 4. 請求明細を作成し、案件を更新
    FOR job_record IN SELECT * FROM public.jobs WHERE id = ANY(job_ids) LOOP
        INSERT INTO public.invoice_items (invoice_id, job_id, description, quantity, unit, unit_price, line_total)
        VALUES (v_new_invoice_id, job_record.id, job_record.title, 1, '式', job_record.price, job_record.price);
        
        UPDATE public.jobs
        SET 
            invoice_status = '請求済',
            invoice_id = v_new_invoice_id,
            invoiced_at = NOW()
        WHERE id = job_record.id;
    END LOOP;

    -- 5. 新しい請求書IDと番号を返す
    RETURN QUERY SELECT v_new_invoice_id, v_invoice_no;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 請求書を入金済みにする関数
CREATE OR REPLACE FUNCTION public.mark_invoice_paid(p_invoice_id UUID)
RETURNS void AS $$
DECLARE
    job_record RECORD;
BEGIN
    -- 1. 請求書のステータスを更新
    UPDATE public.invoices
    SET status = 'paid'
    WHERE id = p_invoice_id;

    -- 2. 関連する案件のステータスを更新
    FOR job_record IN 
        SELECT j.* FROM public.jobs j
        JOIN public.invoice_items ii ON j.id = ii.job_id
        WHERE ii.invoice_id = p_invoice_id
    LOOP
        UPDATE public.jobs
        SET 
            invoice_status = '入金済',
            paid_at = NOW()
        WHERE id = job_record.id;
    END LOOP;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;


-- 2. 受信トレイ機能用の新規テーブル作成 (存在しない場合のみ)
CREATE TABLE IF NOT EXISTS public.inbox_items (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  file_name TEXT NOT NULL,
  file_path TEXT NOT NULL,
  mime_type TEXT NOT NULL,
  status TEXT NOT NULL, -- 'processing', 'pending_review', 'approved', 'error'
  doc_type TEXT NOT NULL DEFAULT 'unknown',
  extracted_data JSONB,
  error_message TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);
ALTER TABLE public.inbox_items ADD COLUMN IF NOT EXISTS doc_type TEXT NOT NULL DEFAULT 'unknown';


-- *** NEW *** 買掛金管理テーブル
CREATE TABLE IF NOT EXISTS public.accounts_payable (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    supplier_name TEXT NOT NULL,
    invoice_date DATE NOT NULL,
    due_date DATE NOT NULL,
    amount NUMERIC NOT NULL,
    status TEXT NOT NULL DEFAULT 'unpaid', -- 'unpaid', 'paid'
    inbox_item_id UUID REFERENCES public.inbox_items(id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);


-- 3. 承認ワークフロー用の新規テーブル作成 (存在しない場合のみ)
-- ユーザーマスターテーブル
CREATE TABLE IF NOT EXISTS public.users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  role TEXT NOT NULL DEFAULT 'user'
);

-- 申請種別マスターテーブル
CREATE TABLE IF NOT EXISTS public.application_codes (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  code VARCHAR(10) UNIQUE NOT NULL,
  name TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);
-- description列を追加 (存在しない場合のみ)
ALTER TABLE public.application_codes ADD COLUMN IF NOT EXISTS description TEXT;

-- *** NEW *** 承認ルートマスターテーブル
CREATE TABLE IF NOT EXISTS public.approval_routes (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL UNIQUE,
  route_data JSONB NOT NULL, -- { "steps": [{ "approver_id": "uuid" }, ...] }
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);


-- 全ての申請を格納する中央テーブル
CREATE TABLE IF NOT EXISTS public.applications (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  applicant_id UUID REFERENCES public.users(id),
  application_code_id UUID REFERENCES public.application_codes(id),
  form_data JSONB,
  status TEXT NOT NULL DEFAULT 'draft',
  submitted_at TIMESTAMPTZ,
  approved_at TIMESTAMPTZ,
  rejected_at TIMESTAMPTZ,
  current_level INTEGER,
  approver_id UUID REFERENCES public.users(id),
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);
-- 差し戻し理由を格納するカラムを追加 (存在しない場合のみ)
ALTER TABLE public.applications ADD COLUMN IF NOT EXISTS rejection_reason TEXT;
-- *** NEW *** 承認ルートIDを格納するカラムを追加
ALTER TABLE public.applications DROP COLUMN IF EXISTS approval_route;
ALTER TABLE public.applications ADD COLUMN IF NOT EXISTS approval_route_id UUID REFERENCES public.approval_routes(id);

-- FIX: Add Purchasing and Inventory tables
-- *** NEW *** Purchasing and Inventory tables
CREATE TABLE IF NOT EXISTS public.purchase_orders (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    supplier_name TEXT NOT NULL,
    item_name TEXT NOT NULL,
    order_date DATE NOT NULL DEFAULT NOW(),
    quantity NUMERIC NOT NULL,
    status TEXT NOT NULL, -- '発注済', '受領済', 'キャンセル'
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
-- unit_price カラムを追加
ALTER TABLE public.purchase_orders ADD COLUMN IF NOT EXISTS unit_price NUMERIC NOT NULL DEFAULT 0;


CREATE TABLE IF NOT EXISTS public.inventory_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL UNIQUE,
    category TEXT NOT NULL,
    quantity NUMERIC NOT NULL,
    unit TEXT NOT NULL,
    unit_price NUMERIC NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);


-- 4. アプリケーションの動作に必要な初期データの登録
-- *** UPDATED *** 勘定科目マスターの初期データ
-- ON CONFLICT句により、既に存在するデータは上書きせず、安全に実行できます。
INSERT INTO public.account_items (code, name, category_code, sort_order, is_active) VALUES
  ('1111', '現金', 'NOC', 0, true),
  ('1121', '売掛金', 'NOC', 0, true),
  ('2111', '買掛金', 'NOC', 0, true),
  ('2112', '未払金', 'NOC', 0, true),
  ('4111', '売上', 'NOC', 4, true),
  ('5111', '仕入', 'NOC', 5, true),
  ('5121', '経費', 'NOC', 5, true),
  ('5122', '旅費交通費', 'NOC', 5, true)
ON CONFLICT (code) DO NOTHING;


-- 役割(role)カラムの追加 (旧バージョンからの移行用)
ALTER TABLE public.users ADD COLUMN IF NOT EXISTS role TEXT NOT NULL DEFAULT 'user';

-- アプリケーションの基本動作に必要なユーザーを登録します
INSERT INTO public.users (id, name, role)
SELECT * FROM (VALUES
  ('a1b2c3d4-e5f6-7890-1234-567890abcdef', '山田 太郎 (部長)', 'admin'),
  ('b2c3d4e5-f6a7-8901-2345-67890abcdef1', '鈴木 花子 (課長)', 'user'),
  ('c3d4e5f6-a7b8-9012-3456-7890abcdef12', '橋本 唱一', 'user')
) AS v(id, name, role)
ON CONFLICT (id) DO UPDATE SET name = EXCLUDED.name, role = EXCLUDED.role;


-- リード管理用の初期データを登録します
INSERT INTO public.leads (name, company, email, status, source, inquiry_types) VALUES
('井村 拓真', 'レバレジーズM&Aアドバイザリー株式会社', 't.akuma@leverages.jp', '新規', 'Webフォーム', ARRAY['資料請求']),
('山下 瑞典', '株式会社vanquet', 'yamashitayk@vanquet.jp', '新規', '紹介', ARRAY['見積依頼']),
('テスト ユーザー', 'テスト株式会社', 'djiohijma@proton.me', '未対応', '不明', ARRAY['その他']);
`;
  const [copied, setCopied] = useState(false);

  const handleCopy = () => {
    navigator.clipboard.writeText(sqlScript).then(() => {
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    });
  };

  return (
    <div className="fixed inset-0 bg-slate-900 bg-opacity-80 flex justify-center items-center z-50 p-4">
        <div className="bg-white dark:bg-slate-800 rounded-2xl shadow-2xl w-full max-w-4xl max-h-[90vh] flex flex-col">
            <header className="p-6 border-b border-slate-200 dark:border-slate-700">
                <h2 className="text-2xl font-bold text-slate-800 dark:text-white flex items-center gap-3">
                    <DatabaseIcon className="w-8 h-8 text-blue-500" />
                    データベースの初期設定が必要です
                </h2>
                <p className="mt-2 text-slate-500 dark:text-slate-400">
                    アプリケーションを初めて使用する際に、必要なテーブルと初期データをセットアップする必要があります。
                </p>
            </header>
            <main className="p-6 overflow-y-auto">
                <p className="mb-4">
                    以下の手順に従って、Supabaseプロジェクトのデータベースをセットアップしてください。
                </p>
                <ol className="list-decimal list-inside space-y-4">
                    <li>
                        Supabaseプロジェクトのダッシュボードにアクセスし、左側のメニューから <strong>SQL Editor</strong> を選択します。
                    </li>
                    <li>
                        <strong>+ New query</strong> をクリックして新しいクエリエディタを開きます。
                    </li>
                    <li>
                        下のボックス内のSQLスクリプト全体をコピーし、エディタに貼り付けます。
                        <div className="relative mt-2">
                            <textarea
                                readOnly
                                value={sqlScript}
                                className="w-full h-48 p-3 font-mono text-sm bg-slate-100 dark:bg-slate-900 rounded-md border border-slate-300 dark:border-slate-700 focus:outline-none"
                            />
                            <button 
                                onClick={handleCopy}
                                className="absolute top-2 right-2 bg-slate-200 dark:bg-slate-700 hover:bg-slate-300 dark:hover:bg-slate-600 text-slate-600 dark:text-slate-200 font-semibold text-sm py-1 px-2 rounded-md flex items-center gap-1.5 transition-colors"
                            >
                                {copied ? <CheckIcon className="w-4 h-4 text-green-500"/> : <ClipboardIcon className="w-4 h-4"/>}
                                {copied ? 'コピーしました' : 'コピー'}
                            </button>
                        </div>
                    </li>
                    <li>
                        緑色の <strong>RUN</strong> ボタンをクリックしてスクリプトを実行します。エラーが出ないことを確認してください。
                    </li>
                    <li>
                        セットアップが完了したら、下の「再接続」ボタンをクリックしてアプリケーションをリロードします。
                    </li>
                </ol>
            </main>
            <footer className="p-6 border-t border-slate-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-800/50 flex justify-end">
                <button 
                    onClick={onRetry}
                    className="flex items-center justify-center gap-2 bg-blue-600 text-white font-semibold py-2.5 px-5 rounded-lg shadow-md hover:bg-blue-700 transition-colors"
                >
                    <RefreshCw className="w-5 h-5" />
                    再接続
                </button>
            </footer>
        </div>
    </div>
  );
};

export default DatabaseSetupInstructionsModal;
