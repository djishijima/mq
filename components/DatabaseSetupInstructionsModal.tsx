import React, { useState } from 'react';

interface DatabaseSetupInstructionsModalProps {
  onRetry: () => void;
}

const DatabaseIcon: React.FC<{className?: string}> = ({className}) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
        <ellipse cx="12" cy="5" rx="9" ry="3"></ellipse>
        <path d="M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"></path>
        <path d="M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"></path>
    </svg>
);


const DatabaseSetupInstructionsModal: React.FC<DatabaseSetupInstructionsModalProps> = ({ onRetry }) => {
  const sqlScript = `-- Supabase SQL Editorで以下のスクリプト全体を実行してください。

-- 1. 既存テーブルの作成
-- 案件情報を保存する "jobs" テーブル
CREATE TABLE public.jobs (
  id TEXT PRIMARY KEY,
  client_name TEXT NOT NULL,
  title TEXT NOT NULL,
  status TEXT NOT NULL,
  due_date DATE NOT NULL,
  quantity INTEGER NOT NULL,
  paper_type TEXT NOT NULL,
  finishing TEXT NOT NULL,
  details TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  price INTEGER NOT NULL,
  variable_cost INTEGER NOT NULL,
  invoice_status TEXT NOT NULL
);

-- 会計の仕訳情報を保存する "journal_entries" テーブル
CREATE TABLE public.journal_entries (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  date TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  account TEXT NOT NULL,
  debit INTEGER NOT NULL DEFAULT 0,
  credit INTEGER NOT NULL DEFAULT 0,
  description TEXT
);

-- 顧客情報を保存する "customers" テーブル (詳細スキーマ)
CREATE TABLE public.customers (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    customer_code VARCHAR,
    customer_code_alt VARCHAR,
    customer_name VARCHAR NOT NULL,
    customer_name_kana VARCHAR,
    name2 VARCHAR,
    customer_rank VARCHAR,
    customer_division VARCHAR,
    sales_type VARCHAR,
    support_company_flag TEXT,
    zip_code VARCHAR,
    address_1 VARCHAR,
    address_2 VARCHAR,
    address_3 VARCHAR,
    nearest_station VARCHAR,
    phone_number VARCHAR,
    fax VARCHAR,
    representative VARCHAR,
    foundation_date DATE,
    capital VARCHAR,
    annual_sales VARCHAR,
    employees_count VARCHAR,
    credit_limit VARCHAR,
    closing_day TEXT,
    pay_day TEXT,
    recovery_method TEXT,
    pay_money TEXT,
    trade_terms TEXT,
    bank_name VARCHAR,
    branch_name VARCHAR,
    branch_code VARCHAR,
    account_no VARCHAR,
    account_name_kana VARCHAR,
    sales_user_code TEXT,
    note TEXT,
    info_history TEXT,
    info_sales_activity TEXT,
    info_order_flow TEXT,
    info_transaction_progress TEXT,
    info_current_orders TEXT,
    info_future_proposals TEXT,
    info_competitors TEXT,
    info_requirements TEXT,
    info_sales_ideas TEXT,
    info_management_notes TEXT,
    info_other TEXT,
    create_user_id UUID,
    create_date TIMESTAMPTZ,
    update_user_id UUID,
    update_date TIMESTAMPTZ,
    drawing_memo TEXT,
    drawing_date TEXT,
    bill_payment_day TEXT,
    bill_pay NUMERIC,
    credit_sales_pay NUMERIC,
    tax_fraction INTEGER,
    tax_in_flag TEXT,
    budget_flag TEXT,
    start_date DATE,
    end_date DATE,
    introducer TEXT,
    keii TEXT,
    previous_person TEXT,
    sales_trends TEXT,
    gross_profit TEXT,
    gross_profit_by_product TEXT,
    company_content TEXT,
    key_person TEXT,
    order_rate TEXT,
    ippan_pub TEXT,
    text_pub TEXT,
    gyokai_pub TEXT,
    shoin_pub TEXT,
    tsushin_edu TEXT,
    other_pub TEXT,
    business_result TEXT,
    company_features TEXT,
    customer_trend TEXT,
    what_happened TEXT,
    response_to_competitors TEXT,
    sales_goal TEXT,
    external_items TEXT,
    internal_items TEXT,
    quotation_point TEXT,
    main_products TEXT,
    total_order_amount TEXT,
    rival_info TEXT,
    customer_contact_info TEXT,
    org_chart TEXT,
    pq TEXT,
    vq TEXT,
    mq TEXT,
    m_rate TEXT,
    accident_history TEXT,
    customer_voice TEXT,
    annual_action_plan TEXT,
    lost_orders TEXT,
    growth_potential TEXT,
    monthly_plan TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);


-- 2. 承認ワークフロー用の新規テーブル作成
-- ユーザーマスターテーブル
CREATE TABLE public.users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- 申請種別マスターテーブル
CREATE TABLE public.application_codes (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  code VARCHAR(10) UNIQUE NOT NULL,
  name TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- 全ての申請を格納する中央テーブル
CREATE TABLE public.applications (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  applicant_id UUID REFERENCES public.users(id),
  application_code_id UUID REFERENCES public.application_codes(id),
  form_data JSONB,
  status TEXT NOT NULL DEFAULT 'draft',
  submitted_at TIMESTAMPTZ,
  approved_at TIMESTAMPTZ,
  rejected_at TIMESTAMPTZ,
  approval_route JSONB,
  current_level INTEGER,
  approver_id UUID REFERENCES public.users(id),
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);


-- 3. サンプルデータの挿入
-- 承認者となるサンプルユーザー
INSERT INTO public.users (name) VALUES
('山田 太郎 (部長)'),
('鈴木 花子 (課長)');

-- 申請種別マスターデータ
INSERT INTO public.application_codes (code, name) VALUES
('EXP', '経費精算'),
('TRP', '交通費申請'),
('LEV', '休暇申請'),
('APL', '金額なし決裁'),
('DLY', '日報');


-- 4. Row Level Security (RLS) の有効化とポリシー設定
-- これにより、匿名キーでアプリからデータにアクセスできるようになります

-- jobsテーブルのポリシー
ALTER TABLE public.jobs ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable public access to jobs" ON public.jobs FOR ALL USING (true) WITH CHECK (true);

-- journal_entriesテーブルのポリシー
ALTER TABLE public.journal_entries ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable public access to journal_entries" ON public.journal_entries FOR ALL USING (true) WITH CHECK (true);

-- customersテーブルのポリシー
ALTER TABLE public.customers ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable public access to customers" ON public.customers FOR ALL USING (true) WITH CHECK (true);

-- usersテーブルのポリシー
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable public access to users" ON public.users FOR ALL USING (true) WITH CHECK (true);

-- application_codesテーブルのポリシー
ALTER TABLE public.application_codes ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable public access to application_codes" ON public.application_codes FOR ALL USING (true) WITH CHECK (true);

-- applicationsテーブルのポリシー
ALTER TABLE public.applications ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable public access to applications" ON public.applications FOR ALL USING (true) WITH CHECK (true);
`;

  const [copied, setCopied] = useState(false);

  const copyToClipboard = () => {
    navigator.clipboard.writeText(sqlScript).then(() => {
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    });
  };

  return (
    <div className="fixed inset-0 bg-slate-900 bg-opacity-80 backdrop-blur-sm flex justify-center items-center z-[100] p-4 font-sans">
      <div className="bg-white dark:bg-slate-800 rounded-2xl shadow-2xl w-full max-w-4xl max-h-[90vh] flex flex-col">
        <div className="p-8 border-b border-slate-200 dark:border-slate-700">
            <h2 className="text-3xl font-bold text-slate-900 dark:text-white">
            データベースの初回セットアップ
            </h2>
            <p className="text-slate-600 dark:text-slate-400 mt-2">
            ようこそ！アプリケーションを初めて実行する際には、データベースのテーブルを作成する簡単なステップが必要です。
            </p>
        </div>
        
        <div className="flex-1 overflow-y-auto p-8 space-y-6 text-slate-700 dark:text-slate-300">
          <div className="flex gap-4">
            <div className="flex-shrink-0 w-8 h-8 rounded-full bg-blue-600 text-white flex items-center justify-center font-bold text-lg">1</div>
            <div>
                <h3 className="font-semibold text-lg mb-1">Supabaseプロジェクトに移動</h3>
                <p>お使いのSupabaseプロジェクトのダッシュボードを開いてください。</p>
            </div>
          </div>
          <div className="flex gap-4">
            <div className="flex-shrink-0 w-8 h-8 rounded-full bg-blue-600 text-white flex items-center justify-center font-bold text-lg">2</div>
            <div>
                <h3 className="font-semibold text-lg mb-1">SQLエディタを開く</h3>
                <p className="flex items-center gap-2">
                ダッシュボードの左側のメニューから、データベースのアイコン (<DatabaseIcon className="w-4 h-4 inline-block" />) をクリックし、
                次に「SQL Editor」を選択します。
                </p>
            </div>
          </div>
          <div className="flex gap-4">
            <div className="flex-shrink-0 w-8 h-8 rounded-full bg-blue-600 text-white flex items-center justify-center font-bold text-lg">3</div>
            <div>
                <h3 className="font-semibold text-lg mb-1">スクリプトを実行</h3>
                <p>
                「New query」をクリックし、以下のSQLスクリプトをコピーしてエディタに貼り付け、「RUN」ボタンを押してください。
                </p>
                <div className="mt-4 text-left bg-slate-100 dark:bg-slate-900 text-slate-800 dark:text-slate-100 p-4 rounded-lg shadow-inner">
                <div className="flex justify-between items-center mb-2">
                    <span className="text-sm font-semibold text-slate-400">SQLセットアップスクリプト</span>
                    <button onClick={copyToClipboard} className="text-sm bg-slate-600 hover:bg-slate-500 text-white font-semibold py-1 px-3 rounded-md transition-colors">
                    {copied ? 'コピーしました！' : 'コピー'}
                    </button>
                </div>
                <pre className="whitespace-pre-wrap break-all text-sm overflow-x-auto max-h-48"><code>{sqlScript}</code></pre>
                </div>
            </div>
          </div>
           <div className="flex gap-4">
             <div className="flex-shrink-0 w-8 h-8 rounded-full bg-blue-600 text-white flex items-center justify-center font-bold text-lg">4</div>
            <div>
                <h3 className="font-semibold text-lg mb-1">アプリケーションを再読み込み</h3>
                <p>
                SQLの実行が完了したら、この画面に戻り、下の「セットアップ完了、再試行」ボタンをクリックしてください。
                </p>
            </div>
          </div>
        </div>
        
        <div className="p-8 text-center border-t border-slate-200 dark:border-slate-700">
           <button onClick={onRetry} className="bg-blue-600 text-white font-bold py-3 px-8 rounded-lg hover:bg-blue-700 transition-colors text-lg shadow-lg hover:shadow-xl transform hover:-translate-y-0.5">
            セットアップ完了、再試行
          </button>
        </div>
      </div>
    </div>
  );
};

export default DatabaseSetupInstructionsModal;