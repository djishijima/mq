import React from 'react';
import { X } from './Icons';

const sqlScript = `-- Supabase SQL Editorで以下のスクリプト全体を実行してください。
-- このスクリプトは何度実行しても安全なように設計されています。

-- =================================================================
-- === 最重要: RLS再帰エラーの修正 ===
-- =================================================================
-- usersテーブルに設定されている可能性のある、無限再帰を引き起こすRLSポリシーを無効化します。
-- これを最初に実行することが、すべての問題を解決する鍵となります。
ALTER TABLE public.users DISABLE ROW LEVEL SECURITY;


-- 1. 既存テーブルの作成 (存在しない場合のみ)

-- 部署と役職テーブル (usersテーブルが依存)
CREATE TABLE IF NOT EXISTS public.departments (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS public.positions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL UNIQUE
);

-- ユーザーマスターテーブル (emailをNULL許容、部署・役職FKを追加)
-- 主キーがauth.usersのidを参照するように修正
CREATE TABLE IF NOT EXISTS public.users (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  email TEXT,
  department_id UUID REFERENCES public.departments(id),
  position_id UUID REFERENCES public.positions(id),
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  role TEXT NOT NULL DEFAULT 'user'
);

-- 案件情報を保存する "jobs" テーブル
CREATE TABLE IF NOT EXISTS public.jobs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  job_number SERIAL NOT NULL UNIQUE,
  client_name TEXT NOT NULL,
  title TEXT NOT NULL,
  status TEXT NOT NULL,
  due_date DATE NOT NULL,
  quantity INTEGER NOT NULL,
  paper_type TEXT NOT NULL,
  finishing TEXT NOT NULL,
  details TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  price INTEGER NOT NULL,
  variable_cost INTEGER NOT NULL,
  invoice_status TEXT NOT NULL,
  invoiced_at TIMESTAMPTZ,
  paid_at TIMESTAMPTZ,
  ready_to_invoice BOOLEAN,
  invoice_id TEXT,
  manufacturing_status TEXT
);

-- 会計の仕訳情報を保存する "journal_entries" テーブル
CREATE TABLE IF NOT EXISTS public.journal_entries (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  date TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  account TEXT NOT NULL,
  debit INTEGER NOT NULL DEFAULT 0,
  credit INTEGER NOT NULL DEFAULT 0,
  description TEXT
);

-- 勘定科目マスターテーブル
CREATE TABLE IF NOT EXISTS public.account_items (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  code TEXT NOT NULL UNIQUE,
  name TEXT NOT NULL,
  category_code TEXT,
  is_active BOOLEAN NOT NULL DEFAULT true,
  sort_order INTEGER NOT NULL DEFAULT 0,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);


-- 顧客情報を保存する "customers" テーブル
CREATE TABLE IF NOT EXISTS public.customers (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    customer_code VARCHAR,
    customer_name VARCHAR NOT NULL,
    customer_name_kana VARCHAR,
    representative VARCHAR,
    phone_number VARCHAR,
    address_1 VARCHAR,
    company_content TEXT,
    annual_sales VARCHAR,
    employees_count VARCHAR,
    note TEXT,
    info_sales_activity TEXT,
    info_requirements TEXT,
    info_history TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    post_no VARCHAR,
    address_2 VARCHAR,
    fax VARCHAR,
    closing_day TEXT,
    monthly_plan TEXT,
    pay_day TEXT,
    recovery_method TEXT,
    user_id UUID REFERENCES public.users(id),
    website_url TEXT
);

-- 従業員情報を保存する "employees" テーブル (user_id と active を追加)
CREATE TABLE IF NOT EXISTS public.employees (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID UNIQUE REFERENCES public.users(id) ON DELETE SET NULL,
  name TEXT NOT NULL,
  department TEXT,
  title TEXT,
  hire_date DATE,
  salary INTEGER NOT NULL,
  active BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- リード管理テーブル
CREATE TABLE IF NOT EXISTS public.leads (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    status TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    name TEXT NOT NULL,
    email TEXT,
    phone TEXT,
    company TEXT NOT NULL,
    source TEXT,
    tags TEXT[],
    message TEXT,
    updated_at TIMESTAMPTZ,
    referrer TEXT,
    referrer_url TEXT,
    landing_page_url TEXT,
    search_keywords TEXT,
    utm_source TEXT,
    utm_medium TEXT,
    utm_campaign TEXT,
    utm_term TEXT,
    utm_content TEXT,
    user_agent TEXT,
    ip_address TEXT,
    device_type TEXT,
    browser_name TEXT,
    os_name TEXT,
    country TEXT,
    city TEXT,
    region TEXT,
    employees TEXT,
    budget TEXT,
    timeline TEXT,
    inquiry_type TEXT,
    inquiry_types TEXT[],
    info_sales_activity TEXT
);

-- バグ報告・改善要望テーブル
CREATE TABLE IF NOT EXISTS public.bug_reports (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  reporter_name TEXT NOT NULL,
  report_type TEXT NOT NULL, -- 'bug' or 'improvement'
  summary TEXT NOT NULL,
  description TEXT NOT NULL,
  status TEXT NOT NULL DEFAULT '未対応',
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- 2. 受信トレイ機能用の新規テーブル作成
CREATE TABLE IF NOT EXISTS public.inbox_items (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  file_name TEXT NOT NULL,
  file_path TEXT NOT NULL,
  mime_type TEXT NOT NULL,
  status TEXT NOT NULL,
  extracted_data JSONB,
  error_message TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);


-- 3. 承認ワークフロー用のテーブル作成と修正

-- 申請種別マスターテーブル
CREATE TABLE IF NOT EXISTS public.application_codes (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  code VARCHAR(10) UNIQUE NOT NULL,
  name TEXT NOT NULL,
  description TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- 承認ルートマスターテーブル
CREATE TABLE IF NOT EXISTS public.approval_routes (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL UNIQUE,
  route_data JSONB NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);


-- 全ての申請を格納する中央テーブル
CREATE TABLE IF NOT EXISTS public.applications (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  applicant_id UUID REFERENCES public.users(id),
  application_code_id UUID REFERENCES public.application_codes(id),
  form_data JSONB,
  status TEXT NOT NULL DEFAULT 'draft',
  submitted_at TIMESTAMPTZ,
  approved_at TIMESTAMPTZ,
  rejected_at TIMESTAMPTZ,
  current_level INTEGER,
  approver_id UUID REFERENCES public.users(id),
  rejection_reason TEXT,
  approval_route_id UUID REFERENCES public.approval_routes(id),
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);


-- 発注・在庫テーブル
CREATE TABLE IF NOT EXISTS public.purchase_orders (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    supplier_name TEXT NOT NULL,
    item_name TEXT NOT NULL,
    order_date DATE NOT NULL DEFAULT NOW(),
    quantity NUMERIC NOT NULL,
    unit_price NUMERIC NOT NULL,
    status TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.inventory_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL UNIQUE,
    category TEXT NOT NULL,
    quantity NUMERIC NOT NULL,
    unit TEXT NOT NULL,
    unit_price NUMERIC NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- 4. 請求書関連テーブル
CREATE TABLE IF NOT EXISTS public.invoices (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    invoice_no TEXT UNIQUE NOT NULL,
    invoice_date DATE NOT NULL,
    due_date DATE,
    customer_name TEXT NOT NULL,
    subtotal_amount NUMERIC NOT NULL,
    tax_amount NUMERIC NOT NULL,
    total_amount NUMERIC NOT NULL,
    status TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    paid_at TIMESTAMPTZ
);

CREATE TABLE IF NOT EXISTS public.invoice_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    invoice_id UUID REFERENCES public.invoices(id) ON DELETE CASCADE,
    job_id TEXT,
    description TEXT NOT NULL,
    quantity NUMERIC NOT NULL,
    unit TEXT NOT NULL,
    unit_price NUMERIC NOT NULL,
    line_total NUMERIC NOT NULL,
    sort_index INTEGER NOT NULL
);

-- 見積もり関連テーブル
CREATE TABLE IF NOT EXISTS public.estimates (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    estimate_number SERIAL NOT NULL UNIQUE,
    customer_name TEXT NOT NULL,
    title TEXT NOT NULL,
    total NUMERIC NOT NULL,
    delivery_date DATE,
    payment_terms TEXT,
    delivery_method TEXT,
    notes TEXT,
    status TEXT NOT NULL,
    version INTEGER NOT NULL DEFAULT 1,
    user_id UUID REFERENCES public.users(id),
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

CREATE TABLE IF NOT EXISTS public.estimate_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    estimate_id UUID REFERENCES public.estimates(id) ON DELETE CASCADE,
    division TEXT,
    content TEXT NOT NULL,
    quantity NUMERIC,
    unit TEXT,
    unit_price NUMERIC,
    price NUMERIC,
    cost NUMERIC,
    cost_rate REAL,
    subtotal NUMERIC
);

-- 経費申請テーブル
CREATE TABLE IF NOT EXISTS public.expenses (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    status TEXT NOT NULL,
    project_id TEXT,
    requester_id UUID REFERENCES public.users(id),
    account TEXT,
    tax_code TEXT,
    amount_ex NUMERIC,
    tax_amount NUMERIC,
    amount_in NUMERIC,
    cost_type TEXT,
    occurred_on DATE,
    vendor TEXT,
    memo TEXT,
    delta_m NUMERIC,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now()
);

CREATE TABLE IF NOT EXISTS public.expense_attachments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    expense_id UUID REFERENCES public.expenses(id) ON DELETE CASCADE,
    file_name TEXT NOT NULL,
    file_url TEXT NOT NULL
);

-- =================================================================
-- === スキーマの更新 (下位互換性のための修正) ===
-- =================================================================
-- 以前のセットアップで 'jobs' テーブルに 'manufacturing_status' カラムが存在しない場合に追加します。
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns
    WHERE table_schema = 'public' AND table_name = 'jobs' AND column_name = 'manufacturing_status'
  ) THEN
    ALTER TABLE public.jobs ADD COLUMN manufacturing_status TEXT;
    RAISE NOTICE 'Column "manufacturing_status" added to "jobs" table.';
  END IF;
END;
$$;


-- =================================================================
-- === 重要: ユーザ同期の問題を修正するトリガー関数 ===
-- =================================================================
-- auth.usersに新しいユーザーが追加された際に、public.usersにレコードを同期します。
-- emailが取得できない場合でも、エラーを起こさずプレースホルダー値を挿入するように修正済みです。

CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = ''
AS $$
DECLARE
  v_email text;
  v_name  text;
BEGIN
  -- name: raw_user_meta_dataからfull_nameを取得、なければemail、それもなければ'New User'
  v_name := COALESCE(
    NEW.raw_user_meta_data->>'full_name',
    NEW.email,
    'New User'
  );

  -- email: 複数のソースからemailを探し、なければプレースホルダーを生成
  SELECT COALESCE(
    NEW.email,
    (SELECT i.identity_data->>'email'
     FROM auth.identities i
     WHERE i.user_id = NEW.id
     ORDER BY i.created_at DESC
     LIMIT 1),
    'no-email+' || NEW.id::text || '@example.local'
  )
  INTO v_email;

  -- public.usersテーブルに挿入。既に存在する場合は何もしない
  INSERT INTO public.users (id, name, email, role)
  VALUES (NEW.id, v_name, v_email, 'user')
  ON CONFLICT (id) DO NOTHING;

  RETURN NEW;
EXCEPTION
  WHEN OTHERS THEN
    -- エラーが発生してもAuthプロセスをブロックしないように、ログを出力して正常に終了
    RAISE NOTICE 'handle_new_user failed for user_id=%: %', NEW.id, SQLERRM;
    RETURN NEW;
END;
$$;

-- auth.usersテーブルに対するトリガーを作成または確認
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- =================================================================
-- === 重要: 過去に同期失敗したユーザーを補完する処理 ===
-- =================================================================
-- auth.usersに存在するがpublic.usersに存在しないユーザーを検出し、補完挿入します。
INSERT INTO public.users (id, name, email, role)
SELECT
  au.id,
  COALESCE(au.raw_user_meta_data->>'full_name', au.email, 'New User'),
  COALESCE(
    au.email,
    (SELECT i.identity_data->>'email'
     FROM auth.identities i
     WHERE i.user_id = au.id
     ORDER BY i.created_at DESC
     LIMIT 1),
    'no-email+' || au.id::text || '@example.local'
  ),
  'user'
FROM auth.users au
LEFT JOIN public.users pu ON pu.id = au.id
WHERE pu.id IS NULL;

-- =================================================================
-- === 新規: 有効な従業員ビュー ===
-- =================================================================
-- アプリケーションがユーザー一覧を取得するためのビューを作成します。
CREATE OR REPLACE VIEW public.v_employees_active AS
SELECT
  u.id AS user_id,
  COALESCE(e.name, u.name) AS name,
  e.department,
  e.title,
  u.role,
  u.created_at,
  e.active,
  u.email
FROM public.users u
LEFT JOIN public.employees e ON e.user_id = u.id
WHERE COALESCE(e.active, true) = true;

-- ビューと基底テーブルへのアクセス権を明示的に付与
GRANT SELECT ON public.users TO anon, authenticated;
GRANT SELECT ON public.employees TO anon, authenticated;
GRANT SELECT ON public.v_employees_active TO anon, authenticated;


-- 5. アプリケーションの動作に必要な初期データの登録
-- 勘定科目マスターの初期データ
INSERT INTO public.account_items (code, name, category_code, sort_order, is_active) VALUES
  ('1111', '現金', 'NOC', 0, true),
  ('1121', '売掛金', 'NOC', 0, true),
  ('2111', '買掛金', 'NOC', 0, true),
  ('2112', '未払金', 'NOC', 0, true),
  ('4111', '売上', 'NOC', 4, true),
  ('5111', '仕入', 'NOC', 5, true),
  ('5121', '経費', 'NOC', 5, true),
  ('5122', '旅費交通費', 'TRP', 5, true)
ON CONFLICT (code) DO NOTHING;

-- 申請種別マスターの初期データ
INSERT INTO public.application_codes (code, name, description) VALUES
  ('EXP', '経費精算申請', '出張費や備品購入費などの経費を精算するための申請です。'),
  ('TRP', '交通費申請', '業務上の移動にかかった交通費を申請します。'),
  ('LEV', '休暇申請', '有給休暇や欠勤などの休暇を申請します。'),
  ('APL', '稟議申請', '金額の発生しない承認（契約締結など）を申請します。'),
  ('DLY', '日報', '日々の業務内容を報告します。'),
  ('WKR', '週報', '週間の業務内容と成果を報告します。')
ON CONFLICT (code) DO UPDATE SET name = EXCLUDED.name, description = EXCLUDED.description;


-- アプリケーションの基本動作に必要なデモユーザーを登録します
-- (auth.usersに存在しない場合、トリガーによって自動的に作成されます)
INSERT INTO public.employees (user_id, name, department, title, hire_date, salary, active) VALUES
((SELECT id FROM auth.users WHERE email = 'yamada.taro@example.com' LIMIT 1), '山田 太郎', '営業部', '部長', '2010-04-01', 500000, true),
((SELECT id FROM auth.users WHERE email = 'suzuki.hanako@example.com' LIMIT 1), '鈴木 花子', '製造部', '課長', '2015-04-01', 400000, true),
((SELECT id FROM auth.users WHERE email = 'hashimoto.shoichi@example.com' LIMIT 1), '橋本 唱一', '営業部', '担当', '2020-04-01', 300000, true)
ON CONFLICT (user_id) DO UPDATE 
SET name = EXCLUDED.name, 
    department = EXCLUDED.department, 
    title = EXCLUDED.title,
    active = EXCLUDED.active;


-- 6. RLS (Row-Level Security) の有効化とポリシー設定
-- 注意: これは開発用の基本的なポリシーです。認証済みユーザーはほぼ全ての操作が可能です。
-- 本番環境では、要件に応じてより厳密なポリシーを定義してください。

DO $$
DECLARE
    t_name TEXT;
    -- usersテーブルはRLSを無効化したままなので、ループ対象から除外します。
    tables TEXT[] := ARRAY[
        'jobs', 'journal_entries', 'account_items', 'customers', 'employees', 'leads', 
        'inbox_items', 'application_codes', 'approval_routes', 'applications', 
        'purchase_orders', 'inventory_items', 'invoices', 'invoice_items',
        'departments', 'positions', 'bug_reports', 'estimates', 'estimate_items',
        'expenses', 'expense_attachments'
    ];
BEGIN
    -- usersテーブルのRLSが無効化されていることを確認
    RAISE NOTICE 'RLS for public.users remains disabled to prevent recursion.';

    FOREACH t_name IN ARRAY tables
    LOOP
        -- テーブルでRLSを有効化
        EXECUTE format('ALTER TABLE public.%I ENABLE ROW LEVEL SECURITY;', t_name);
        
        -- 既存のポリシーを削除して再作成
        EXECUTE format('DROP POLICY IF EXISTS "Allow all access for authenticated users" ON public.%I;', t_name);
        
        -- ポリシー: 認証済みユーザーは全操作が可能
        EXECUTE format('
            CREATE POLICY "Allow all access for authenticated users"
            ON public.%I
            FOR ALL
            TO authenticated
            USING (true)
            WITH CHECK (true);
        ', t_name);
        RAISE NOTICE 'RLS policy applied to public.%', t_name;
    END LOOP;
END;
$$;

-- =================================================================
-- === 新規: 匿名ユーザー向け読み取りポリシー ===
-- =================================================================
-- employeesテーブルに、匿名ユーザー(anon)が有効な従業員のみを読み取れるSELECTポリシーを追加します。
-- これにより、アプリケーション起動時にユーザー一覧を正常に取得できるようになります。
DROP POLICY IF EXISTS "Allow anon read access on active employees" ON public.employees;
CREATE POLICY "Allow anon read access on active employees"
ON public.employees
FOR SELECT
TO anon
USING (COALESCE(active, true) = true);
`;

interface DatabaseSetupInstructionsModalProps {
    onRetry: () => void;
}

const DatabaseSetupInstructionsModal: React.FC<DatabaseSetupInstructionsModalProps> = ({ onRetry }) => {
    return (
        <div className="fixed inset-0 bg-slate-100 dark:bg-slate-900 flex justify-center items-center z-[200] p-4">
            <div className="bg-white dark:bg-slate-800 rounded-2xl shadow-2xl w-full max-w-4xl h-[90vh] flex flex-col">
                <div className="p-6 border-b border-slate-200 dark:border-slate-700">
                    <h2 className="text-2xl font-bold text-slate-800 dark:text-white">データベース セットアップガイド</h2>
                    <p className="mt-1 text-slate-500 dark:text-slate-400">
                        以下のSQLスクリプトをSupabaseのSQL Editorで実行して、必要なテーブルと設定をセットアップしてください。
                    </p>
                </div>
                <div className="flex-1 p-6 overflow-auto">
                    <pre className="bg-slate-100 dark:bg-slate-900 p-4 rounded-lg text-xs text-slate-700 dark:text-slate-300 whitespace-pre-wrap">
                        <code>{sqlScript}</code>
                    </pre>
                </div>
                <div className="flex justify-end p-4 bg-slate-50 dark:bg-slate-800/50 border-t border-slate-200 dark:border-slate-700">
                    <button
                        onClick={onRetry}
                        className="bg-blue-600 text-white font-semibold py-2.5 px-4 rounded-lg shadow-md hover:bg-blue-700"
                    >
                        セットアップ完了、再接続を試す
                    </button>
                </div>
            </div>
        </div>
    );
};

export default DatabaseSetupInstructionsModal;